#!/usr/bin/env python3
"""
FIXED Sanitization Pipeline Test Script
Usage: python test_fixed_sanitizer.py input.srt [--output output.srt] [--config config.json] [--sensitivity balanced]

CRITICAL FIXES IMPLEMENTED:
- STRICT timing conditions (a) & (b) only - no unauthorized timing adjustments
- Content protection for numbers/currency (fixes 1000ÂÜÜ‚Üí100ÂÜÜ semantic corruption)
- Enhanced repetition patterns (catches all previously missed cases)
- Complete line matching only (prevents substring corruption)
- Robust validation and error prevention

Pattern Detection Improvements:
- Word+comma repetition: '„ÅäÂâç„Å´„ÄÅ„ÅäÂâç„Å´„ÄÅ...' 
- Multi-char word repetition: '„Åà„ÅÑ„Çà„Å£„Åì„ÅÑ...'
- Vowel extensions: '„ÅÇ„Äú„Äú„Äú„Äú...'
- Character repetition: '„Åà„Åà„Åà„Åà„Åà„Åà...'
- Complete content protection for meaningful text

Timing Logic Fixed:
- Only adjusts subtitles with content changes OR 12s+ duration
- End-fixed, start-adjusted strategy (as specified)
- No overlap prevention/padding (as forbidden)
"""

import argparse
import sys
import logging
from pathlib import Path
from typing import Optional

# Add this block at the top of your test_phase1c_sanitizer.py script
import logging
import sys
import codecs


# Can handle UTF-8.
if sys.stdout.encoding != 'utf-8':
    # For Python 3.7+
    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
        print("‚úÖ Reconfigured stdout and stderr to use UTF-8")
    except TypeError:
        # Fallback for older versions or different environments
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
        print("‚úÖ Wrapped stdout and stderr with UTF-8 writer")

# Re-configure the root logger to use the new stream settings and encoding.
# This will affect all logging calls in your application for this run.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    # The 'force=True' argument ensures this new configuration overwrites any defaults.
    force=True 
)



'''
# Configure logging to see debug output
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('fixed_sanitization.log')
    ]
)
'''


# Import the updated sanitizer
try:
    from whisperjav.modules.subtitle_sanitizer import SubtitleSanitizer
    from whisperjav.config.sanitization_config import SanitizationConfig
    from whisperjav.utils.logger import logger
except ImportError as e:
    print(f"Error importing WhisperJAV modules: {e}")
    print("Make sure you're running from the correct directory and WhisperJAV is properly installed.")
    sys.exit(1)

def create_test_config(sensitivity: str = "balanced", language: str = "ja") -> SanitizationConfig:
    """Create a test configuration for improved pipeline testing"""
    
    config = SanitizationConfig(
        # Test configuration for improved pipeline
        sensitivity_mode=sensitivity,
        primary_language=language,
        
        # Enable improved Phase 1 features
        enable_exact_matching=True,
        enable_repetition_cleaning=True,  # Only extreme cases in Phase 1
        
        # Disable advanced features for now (will be Phase 3+)
        enable_regex_matching=False,
        enable_fuzzy_matching=False,
        enable_cross_subtitle=False,
        
        # Output options for testing
        save_original=True,
        save_artifacts=True,
        preserve_original_file=True,  # Keep original, create new cleaned file
        artifact_detail_level="full",
        create_raw_subs_folder=True,
        
        # Debug options
        verbose=True,
        debug=True
    )
    
    return config

def main():
    parser = argparse.ArgumentParser(
        description="Test FIXED sanitization pipeline addressing all critical issues",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python test_fixed_sanitizer.py test_input.srt
  python test_fixed_sanitizer.py test_input.srt --output cleaned_output.srt
  python test_fixed_sanitizer.py test_input.srt --sensitivity aggressive --language ja
  python test_fixed_sanitizer.py test_input.srt --config custom_config.json

CRITICAL FIXES IMPLEMENTED:
  - STRICT timing conditions (only content-changed OR 12s+ duration)
  - Content protection (numbers, currency) prevents semantic corruption
  - Enhanced pattern detection (catches all previously missed repetitions)
  - Complete line matching only (no substring corruption)
  - Robust validation throughout processing pipeline
        """
    )
    
    parser.add_argument(
        'input_srt', 
        type=str,
        help='Input SRT file to sanitize'
    )
    
    parser.add_argument(
        '--output', '-o',
        type=str,
        default=None,
        help='Output SRT file (default: input_file.fixed_cleaned.srt)'
    )
    
    parser.add_argument(
        '--sensitivity', '-s',
        choices=['conservative', 'balanced', 'aggressive'],
        default='balanced',
        help='Sanitization sensitivity level (default: balanced)'
    )
    
    parser.add_argument(
        '--language', '-l',
        default='ja',
        help='Primary language for sanitization (default: ja)'
    )
    
    parser.add_argument(
        '--config', '-c',
        type=str,
        default=None,
        help='Custom configuration JSON file'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Enable debug logging'
    )
    
    args = parser.parse_args()
    
    # Set debug level
    if args.debug:
        logger.setLevel(logging.DEBUG)
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Validate input file
    input_path = Path(args.input_srt)
    if not input_path.exists():
        print(f"Error: Input file '{input_path}' does not exist.")
        sys.exit(1)
    
    if not input_path.suffix.lower() == '.srt':
        print(f"Warning: Input file '{input_path}' doesn't have .srt extension.")
    
    # Determine output file
    if args.output:
        output_path = Path(args.output)
    else:
        output_path = input_path.parent / f"{input_path.stem}.fixed_cleaned.srt"
    
    print(f"üìÅ Input SRT: {input_path}")
    print(f"üìÅ Output SRT: {output_path}")
    print(f"‚öôÔ∏è  Sensitivity: {args.sensitivity}")
    print(f"üåê Language: {args.language}")
    print("-" * 50)
    
    try:
        # Create configuration
        if args.config:
            config_path = Path(args.config)
            if not config_path.exists():
                print(f"Error: Config file '{config_path}' does not exist.")
                sys.exit(1)
            config = SanitizationConfig.from_file(config_path)
            print(f"üìã Using config file: {config_path}")
        else:
            config = create_test_config(args.sensitivity, args.language)
            print(f"üìã Using default test configuration")
        
        # Override output path in config
        config.preserve_original_file = True
        
        # Initialize sanitizer
        print("\nüîß Initializing SubtitleSanitizer...")
        sanitizer = SubtitleSanitizer(config)
        
        # Process the file
        print(f"\nüßπ Starting improved sanitization pipeline...")
        print("Phase 1: Content cleaning (exact hallucination + extreme repetition)")
        print("Phase 2: Content-aware timing adjustment") 
        print("=" * 60)
        
        result = sanitizer.process(input_path)
        
        print("=" * 60)
        print("‚úÖ FIXED sanitization pipeline completed!")
        
        # Copy result to specified output path if different
        if result.sanitized_path != output_path:
            import shutil
            shutil.copy2(result.sanitized_path, output_path)
            print(f"üìÑ Copied result to: {output_path}")
        
        # Print summary
        stats = result.statistics
        print(f"\nüìä SANITIZATION SUMMARY:")
        print(f"   Original subtitles: {stats['original_subtitle_count']}")
        print(f"   Final subtitles: {stats['final_subtitle_count']}")
        print(f"   Total modifications: {stats['total_modifications']}")
        print(f"   Subtitles removed: {stats['removals']}")
        print(f"   Subtitles modified: {stats['modifications']}")
        print(f"   Reduction: {stats['reduction_percentage']:.1f}%")
        print(f"   Processing time: {result.processing_time:.2f}s")
        
        # Phase 1 specific stats
        if 'phase1_stats' in stats:
            p1_stats = stats['phase1_stats']
            print(f"\nüéØ CONTENT CLEANING BREAKDOWN:")
            print(f"   Exact hallucination pass 1: {p1_stats['exact_hallucination_pass1_removed']} removed")
            print(f"   Extreme repetition cleaning: {p1_stats['extreme_repetition_cleaned']} cleaned")
            print(f"   Exact hallucination pass 2: {p1_stats['exact_hallucination_pass2_removed']} removed")
            print(f"   Empty subtitles purged: {p1_stats['empty_purged']} purged")
            
            # Hallucination database info
            if p1_stats['hallucination_database_size']:
                print(f"\nüóÉÔ∏è  HALLUCINATION DATABASE:")
                for lang, count in p1_stats['hallucination_database_size'].items():
                    print(f"   {lang}: {count} phrases")
        
        # Check for timing adjustments
        timing_adjustments = stats.get('modifications_by_step', {}).get('content_aware_timing_adjustment', 0)
        if timing_adjustments > 0:
            print(f"\n‚è±Ô∏è  TIMING ADJUSTMENTS:")
            print(f"   Content-aware adjustments: {timing_adjustments}")
            print(f"   Strategy: End-fixed, start-adjusted based on content length")
        
        # Generated files
        print(f"\nüìÅ GENERATED FILES:")
        print(f"   üßπ Cleaned SRT: {output_path}")
        if result.original_backup_path:
            print(f"   üíæ Original backup: {result.original_backup_path}")
        if result.artifacts_path:
            print(f"   üîç Artifacts log: {result.artifacts_path}")
        print(f"   üìã Processing log: fixed_sanitization.log")
        
        print(f"\nüéâ FIXED sanitization pipeline completed!")
        print(f"You can now compare '{input_path}' with '{output_path}'")
        print(f"\nCRITICAL FIXES IMPLEMENTED:")
        print(f"  ‚úÖ STRICT timing conditions (a) & (b) only - no unauthorized adjustments")
        print(f"  ‚úÖ Content protection for numbers/currency (fixes 1000ÂÜÜ‚Üí100ÂÜÜ bug)")
        print(f"  ‚úÖ Enhanced repetition patterns (catches all missed cases)")
        print(f"  ‚úÖ Complete line matching only (no substring corruption)")
        print(f"  ‚úÖ Robust error prevention and validation")
        print(f"\nSpecific pattern improvements:")
        print(f"  - Word+comma repetition: '„ÅäÂâç„Å´„ÄÅ„ÅäÂâç„Å´„ÄÅ...' ‚Üí detected")
        print(f"  - Multi-char word repetition: '„Åà„ÅÑ„Çà„Å£„Åì„ÅÑ...' ‚Üí detected")  
        print(f"  - Vowel extensions: '„ÅÇ„Äú„Äú„Äú„Äú...' ‚Üí detected")
        print(f"  - Character repetition: '„Åà„Åà„Åà„Åà„Åà„Åà...' ‚Üí detected")
        print(f"  - Number protection: '1000ÂÜÜ' ‚Üí preserved")
        print(f"\nTiming logic:")
        print(f"  - Only adjusts if content changed OR duration > 12s")
        print(f"  - No overlap padding/prevention (as requested)")
        print(f"  - End-fixed, start-adjusted strategy")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Error during sanitization: {e}")
        logger.exception("Full error details:")
        return 1

if __name__ == "__main__":
    sys.exit(main())